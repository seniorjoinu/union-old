type OnMoveListenerError = variant {
    AccessDenied;
    ListenerDoesNotExist;
    ListenerFatalError;
};

type Error = variant {
    AlreadyHasClaim;
    DoesNotHaveClaimYet;
    AccessDenied;
    ForbiddenOperation;
    ListenerError : OnMoveListenerError;
};

type ClaimTokenInfo = record {
    name : Text;
};

type InfoResult = variant {
    Ok : ClaimTokenInfo;
    Err : Error;
};

type Account = variant {
    None;
    Some : principal;
}

type Controllers = record {
    issue_controller : Account;
    revoke_controller : Account;
    on_move_controller : Account;
    info_controller : Account;
};

type SimpleResult = variant {
    Ok;
    Err : Error;
};

type AccountFilter = variant {
    None;
    Some : Account;
};

type Filter = record {
    from : AccountFilter;
    to : AccountFilter;
};

type RemoteCallEndpoint = record {
     canister_id: principal;
     method_name: text;
};

type OnMoveListener {
    filter : Filter;
    endpoint : RemoveCallEndpoint;
};

type ClaimTokenInitPayload {
    info : ClaimTokenInfo;
    controllers : variant { None; Some : Controllers; };
    on_move_listeners : vec OnMoveListener;
};

type SubscribeResult = variant {
    Ok : nat64;
    Err : Error;
};

type UnsubscribeResult = variant {
    Ok : OnMoveListener;
    Err : Error;
};

service : {
    "info" : () -> (ClaimTokenInfo) query;
    "update_info" : (ClaimTokenInfo) -> InfoResult;

    "controllers" : () -> (Controllers) query;
    "update_info_controller" : (Account) -> (SimpleResult);
    "update_issue_controller" : (Account) -> (SimpleResult);
    "update_revoke_controller" : (Account) -> (SimpleResult);
    "update_on_move_controller" : (Account) -> (SimpleResult);

    "has_claim" : (principal) -> (bool) query;
    "total_supply" : () -> (nat64) query;
    "issue" : (vec principal) -> (vec SimpleResult);
    "revoke" : (vec principal) -> (vec SimpleResult);

    "subscribe_on_move" : (vec OnMoveListener) -> (vec SubscribeResult);
    "unsubscribe_on_move" : (vec nat64) -> (vec UnsubscribeResult);
}
