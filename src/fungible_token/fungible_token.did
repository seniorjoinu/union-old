type OnMoveListenerError = variant {
    AccessDenied;
    ListenerDoesNotExist;
    ListenerFatalError;
};

type Error = variant {
    InsufficientBalance;
    AccessDenied;
    ForbiddenOperation;
    ListenerError : OnMoveListenerError;
};

type FungibleTokenInfo = record {
    name : Text;
    symbol : Text;
    decimals : nat8;
};

type InfoResult = variant {
    Ok : FungibleTokenInfo;
    Err : Error;
};

type Account = variant {
    None;
    Some : principal;
}

type Controllers = record {
    mint_controller : Account;
    on_move_controller : Account;
    info_controller : Account;
};

type SimpleResult = variant {
    Ok;
    Err : Error;
};

type AccountFilter = variant {
    None;
    Some : Account;
};

type Filter = record {
    from : AccountFilter;
    to : AccountFilter;
};

type RemoteCallEndpoint = record {
     canister_id: principal;
     method_name: text;
};

type OnMoveListener {
    filter : Filter;
    endpoint : RemoveCallEndpoint;
};


service : {
    "info" : () -> (FungibleTokenInfo) query;
    "update_info" : (FungibleTokenInfo) -> InfoResult;

    "controllers" : () -> (Controllers) query;
    "update_info_controller" : (Account) -> (SimpleResult);
    "update_mint_controller" : (Account) -> (SimpleResult);
    "update_on_move_controller" : (Account) -> (SimpleResult);

    "balance_of" : (principal) -> (nat64) query;
    "total_supply" : () -> (nat64) query;
    "mint" : (principal, nat64) -> (SimpleResult);
    "send" : (principal, nat64) -> (SimpleResult);
    "burn" : (nat64) -> (SimpleResult);

    "subscribe_on_move" : (OnMoveListener) -> (variant {Ok : nat64; Err : Error;});
    "unsubscribe_on_move" : (nat64) -> (variant {Ok : OnMoveListener; Err : Error;});
}
